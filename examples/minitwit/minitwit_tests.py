# -*- coding: utf-8 -*-
"""
    MiniTwit Tests
    ~~~~~~~~~~~~~~

    Tests the MiniTwit application.

    :copyright: (c) 2010 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
"""
import minitwit
import unittest
import tempfile


class MiniTwitTestCase(unittest.TestCase):

    def setUp(self):
        """
Sets up a test database and application client for the Minitwit framework.

This method creates a temporary in-memory database file, initializes the Minitwit database,
and sets up an application client to interact with the database.
"""
        self.db = tempfile.NamedTemporaryFile()
        self.app = minitwit.app.test_client()
        minitwit.DATABASE = self.db.name
        minitwit.init_db()

    # helper functions

    def register(self, username, password, password2=None, email=None):
        """
Registers a new user.

Parameters:
- `self`: The object instance that this method belongs to.
- `username` (str): The username chosen by the user.
- `password` (str): The password chosen by the user.
- `password2` (str, optional): The confirmation of the password. Defaults to None.
- `email` (str, optional): The email address associated with the account. Defaults to None.

Returns:
- A response object from the server after a POST request to '/register'.

Note: If 'password2' is not provided, it will be set to the same value as 'password'. If 'email' is not provided, it will be generated by appending '@example.com' to the username.
"""
        if password2 is None:
            password2 = password
        if email is None:
            email = username + '@example.com'
        return self.app.post('/register', data={
            'username':     username,
            'password':     password,
            'password2':    password2,
            'email':        email,
        }, follow_redirects=True)

    def login(self, username, password):
        """
Login to the application.

Parameters:
    username (str): The username for login.
    password (str): The password for login.

Returns:
    Response: The response from the server after submitting the login request.

Note:
    This function uses the `app.post` method to send a POST request to the `/login` endpoint with the provided username and password. The `follow_redirects=True` parameter ensures that any redirects are followed, allowing for more robust handling of login responses.
"""

        return self.app.post('/login', data={
            'username': username,
            'password': password
        }, follow_redirects=True)

    def register_and_login(self, username, password):
        self.register(username, password)
        return self.login(username, password)

    def logout(self):
        """
Redirects to the `/logout` endpoint and follows redirects.

Args:
    None

Returns:
    A redirect response object
"""

        return self.app.get('/logout', follow_redirects=True)

    def add_message(self, text):
        rv = self.app.post('/add_message', data={'text': text},
                                    follow_redirects=True)
        if text:
            assert 'Your message was recorded' in rv.data
        return rv

    # testing functions

    def test_register(self):
        """
Tests the register functionality of the class.

This function tests various scenarios for registering users, including:

- Successful registration with default credentials.
- Registration attempt with an existing username.
- Registration attempt without a username.
- Registration attempt without a password.
- Registration attempt with mismatched passwords.
- Registration attempt with invalid email address.

Each test case checks if the expected error message is present in the response data.

Parameters:
self (object): The instance of the class being tested.

Returns:
None
"""

        rv = self.register('user1', 'default')
        assert 'You were successfully registered ' \
               'and can login now' in rv.data
        rv = self.register('user1', 'default')
        assert 'The username is already taken' in rv.data
        rv = self.register('', 'default')
        assert 'You have to enter a username' in rv.data
        rv = self.register('meh', '')
        assert 'You have to enter a password' in rv.data
        rv = self.register('meh', 'x', 'y')
        assert 'The two passwords do not match' in rv.data
        rv = self.register('meh', 'foo', email='broken')
        assert 'You have to enter a valid email address' in rv.data

    def test_login_logout(self):
        rv = self.register_and_login('user1', 'default')
        assert 'You were logged in' in rv.data
        rv = self.logout()
        assert 'You were logged out' in rv.data
        rv = self.login('user1', 'wrongpassword')
        assert 'Invalid password' in rv.data
        rv = self.login('user2', 'wrongpassword')
        assert 'Invalid username' in rv.data

    def test_message_recording(self):
        self.register_and_login('foo', 'default')
        self.add_message('test message 1')
        self.add_message('<test message 2>')
        rv = self.app.get('/')
        assert 'test message 1' in rv.data
        assert '&lt;test message 2&gt;' in rv.data

    def test_timelines(self):
        self.register_and_login('foo', 'default')
        self.add_message('the message by foo')
        self.logout()
        self.register_and_login('bar', 'default')
        self.add_message('the message by bar')
        rv = self.app.get('/public')
        assert 'the message by foo' in rv.data
        assert 'the message by bar' in rv.data

        # bar's timeline should just show bar's message
        rv = self.app.get('/')
        assert 'the message by foo' not in rv.data
        assert 'the message by bar' in rv.data

        # now let's follow foo
        rv = self.app.get('/foo/follow', follow_redirects=True)
        assert 'You are now following &#34;foo&#34;' in rv.data

        # we should now see foo's message
        rv = self.app.get('/')
        assert 'the message by foo' in rv.data
        assert 'the message by bar' in rv.data

        # but on the user's page we only want the user's message
        rv = self.app.get('/bar')
        assert 'the message by foo' not in rv.data
        assert 'the message by bar' in rv.data
        rv = self.app.get('/foo')
        assert 'the message by foo' in rv.data
        assert 'the message by bar' not in rv.data

        # now unfollow and check if that worked
        rv = self.app.get('/foo/unfollow', follow_redirects=True)
        assert 'You are no longer following &#34;foo&#34;' in rv.data
        rv = self.app.get('/')
        assert 'the message by foo' not in rv.data
        assert 'the message by bar' in rv.data


if __name__ == '__main__':
    unittest.main()
